{"version":3,"sources":["../lib/FrontEndBridge.js"],"names":[],"mappings":"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","file":"FrontEndBridge.js","sourcesContent":["ï»¿const { Eventable } = require('omniscience-utilities');\r\n\r\nclass FrontEndBridge extends Eventable {\r\n\tconstructor(subscriptionService, serviceExecutor, fileUtilities, deviceService, simpleServer, simpleTCP) {\r\n\t\tsuper();\r\n\t\tthis._subscriptionService = subscriptionService;\r\n\t\tthis._serviceExecutor = serviceExecutor;\r\n\t\tthis._fileUtilities = fileUtilities;\r\n\t\tthis._deviceService = deviceService;\r\n\t\tthis._simpleServer = simpleServer;\r\n\t\tthis._simpleTCP = simpleTCP;\r\n\r\n\t\tthis._deviceService.on('deviceFound', (...data) => this.sendToFrontEnd(\"deviceFound\", ...data));\r\n\t\tthis._deviceService.on('deviceLost', (...data) => this.sendToFrontEnd(\"deviceLost\", ...data));\r\n\t}\r\n\thandleMessageFromFrontEnd(eventType, uniqueId, ...data) {\r\n\t\tswitch (eventType) {\r\n\t\t\tcase 'Subscribe':\r\n\t\t\t\tlet [eventSubUrl, serviceUUID, serverIP, timeoutInSeconds, subscriptionId] = data;\r\n\r\n\t\t\t\tlet directResponsesTo = `http://${serverIP}:${this._simpleServer.port}/events/${serviceUUID}`;\r\n\t\t\t\tthis._simpleServer.registerPath(`/events/${serviceUUID}`, (request) => this.sendToFrontEnd(\"UPnPEvent\", serviceUUID, request.body));\r\n\t\t\t\tthis._subscriptionService.subscribe(directResponsesTo, eventSubUrl, timeoutInSeconds, subscriptionId).then(\r\n\t\t\t\t\t(subscriptionId) => this.sendToFrontEnd(\"emitResponse\", uniqueId, subscriptionId),\r\n\t\t\t\t\t(err) => this.sendToFrontEnd(\"emitResponse\", uniqueId));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Unsubscribe':\r\n\t\t\t\tthis._simpleServer.registerPath(`/events/${data[2]}`, null);\r\n\t\t\t\tthis._subscriptionService.unsubscribe(...data).then(() => this.sendToFrontEnd(\"emitResponse\", uniqueId));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'CallService':\r\n\t\t\t\tlet [service, method, info] = data;\r\n\t\t\t\tthis._serviceExecutor.callService(service.controlUrl, service.uuid, method, info).then((response) => this.sendToFrontEnd(\"emitResponse\", uniqueId, response));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chooseFiles':\r\n\t\t\t\tthis._fileUtilities.openFileBrowser().then(files => this.sendToFrontEnd(\"emitResponse\", uniqueId, files ? files : []));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'shareFile':\r\n\t\t\t\tlet url = this._simpleServer.registerFile(...data);\r\n\t\t\t\tconsole.log(url);\r\n\t\t\t\tthis.sendToFrontEnd(\"emitResponse\", uniqueId, url);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'loadDevices':\r\n\t\t\t\tthis._deviceService.loadDevices();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'refreshDevices':\r\n\t\t\t\tthis._deviceService.search();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'search':\r\n\t\t\t\tthis._deviceService.search();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sendTCP':\r\n\t\t\t\tthis._simpleTCP.send(...data).then((response) => this.sendToFrontEnd(\"emitResponse\", uniqueId, response));\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tsendToFrontEnd(eventType, ...data) {\r\n\t\tthis.emit(\"sendToFrontEnd\", eventType, ...data);\r\n\t}\r\n\tonMessageFromFrontEnd(message) {\r\n\t\tlet messageObj;\r\n\t\ttry {\r\n\t\t\tmessageObj = JSON.parse(message);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(message);\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.handleMessageFromFrontEnd(messageObj.eventType, ...messageObj.data);\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = FrontEndBridge;"]}